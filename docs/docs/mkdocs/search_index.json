{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Embedding\n\n\nEmbedding is a javascript library that makes it easy to create data-driven immersive environments - by \nembedding\n data points in space and time.\n\n\nEmbedding relies heavily on the \"Borisphere\" of tools to provide a \nresponsive experience\n that works well on desktop, mobile, and \nWebVR\n platforms. In particular, it uses the \nWebVR polyfill\n, the \nWebVR boilerplate\n library, and \nray-input\n to provide pointing-based input across these platforms. WebVR support in various browsers is changing fast, and you can view the latest Embedding compatibility report.\n\n\nSimilar to how \nD3\n builds on HTML and the DOM, including canvases and SVG, Embedding provides an abstraction layer over 3D objects defined in \nWebGL\n and \nthree.js\n, including geometries, materials, and lighting. A primary goal of Embeding is to enable developers who are not 3D experts to create beautiful, effective, and compelling data-driven environments.\n\n\nWhere to go next\n\n\n\n\nCheck out the \ngetting started guide\n to see how easy it is to create your first data-driven environment.\n\n\nTake a look at some examples to get a sense for the range of possibilities.\n\n\nView the main \nembedding project repo\n on github.\n\n\nClone or download the embedding boilerplate repo to get started on your own project.\n\n\nWe'd love your help in building and testing Embedding! Read about \ncontributing\n, checkout the \nroadmap\n, or \nfile an issue\n with any bugs or problems.", 
            "title": "Intro"
        }, 
        {
            "location": "/#welcome-to-embedding", 
            "text": "Embedding is a javascript library that makes it easy to create data-driven immersive environments - by  embedding  data points in space and time.  Embedding relies heavily on the \"Borisphere\" of tools to provide a  responsive experience  that works well on desktop, mobile, and  WebVR  platforms. In particular, it uses the  WebVR polyfill , the  WebVR boilerplate  library, and  ray-input  to provide pointing-based input across these platforms. WebVR support in various browsers is changing fast, and you can view the latest Embedding compatibility report.  Similar to how  D3  builds on HTML and the DOM, including canvases and SVG, Embedding provides an abstraction layer over 3D objects defined in  WebGL  and  three.js , including geometries, materials, and lighting. A primary goal of Embeding is to enable developers who are not 3D experts to create beautiful, effective, and compelling data-driven environments.", 
            "title": "Welcome to Embedding"
        }, 
        {
            "location": "/#where-to-go-next", 
            "text": "Check out the  getting started guide  to see how easy it is to create your first data-driven environment.  Take a look at some examples to get a sense for the range of possibilities.  View the main  embedding project repo  on github.  Clone or download the embedding boilerplate repo to get started on your own project.  We'd love your help in building and testing Embedding! Read about  contributing , checkout the  roadmap , or  file an issue  with any bugs or problems.", 
            "title": "Where to go next"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started With Embedding\n\n\nTODO", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started-with-embedding", 
            "text": "TODO", 
            "title": "Getting Started With Embedding"
        }, 
        {
            "location": "/compatibility/", 
            "text": "Compatibility\n\n\n\n\n\n\n\n\nSystem\n\n\nPlatform\n\n\nChrom(ium)\n\n\nFirefox (Nightly)\n\n\nSafari\n\n\nEdge\n\n\nSamsung Internet\n\n\nCarmel\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nDesktop\n\n\nYES\n\n\nYES\n\n\nn/a\n\n\n?\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\nVive\n\n\nYES\n\n\nYES\n\n\nn/a\n\n\nNo\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\nRift+Touch\n\n\nYES\n\n\nNO\n\n\nn/a\n\n\nNo\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\nMac\n\n\nDesktop\n\n\nYES\n\n\n?\n\n\n?\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\niOS\n\n\nTouch\n\n\nYES\n\n\n?\n\n\nYES\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\nAndroid\n\n\nTouch\n\n\n?\n\n\n?\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\nCardboard\n\n\n?\n\n\n?\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\nGear VR\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n?\n\n\n?\n\n\n\n\n\n\n\n\nDaydream\n\n\n?\n\n\n?\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\nLegend:\n\n\n\n\nYES\n: Confirmed to work\n\n\n?\n: Should work, but not tested\n\n\nNo\n: Does not work\n\n\nn/a\n: Not applicable - browser not available on that system/platform\n\n\n\n\nPlease \nfile an issue\n if you find a compatibility problem on one of the supported system/platform/browser combinations.\n\n\nNotes:\n\n\n\n\nMicrosoft has announced that it intends to support WebVR in Edge\n, but this version has not yet shipped.\n\n\nSpecial Chromium builds and/or Firefox Nightlies are currently required to use WebVR with Vive and Rift.\n\n\nWindows has been tested with 64-bit Windows 8.\n\n\n\n\nSee \nhttps://iswebvrready.org/\n for the latest in overall WebVR compatibility, and \nhttps://webvr.info/\n for links to the latest browser builds, libraries, and other info.", 
            "title": "Compatibility"
        }, 
        {
            "location": "/compatibility/#compatibility", 
            "text": "System  Platform  Chrom(ium)  Firefox (Nightly)  Safari  Edge  Samsung Internet  Carmel      Windows  Desktop  YES  YES  n/a  ?  n/a  n/a     Vive  YES  YES  n/a  No  n/a  n/a     Rift+Touch  YES  NO  n/a  No  n/a  n/a    Mac  Desktop  YES  ?  ?  n/a  n/a  n/a    iOS  Touch  YES  ?  YES  n/a  n/a  n/a    Android  Touch  ?  ?  n/a  n/a  n/a  n/a     Cardboard  ?  ?  n/a  n/a  n/a  n/a     Gear VR  n/a  n/a  n/a  n/a  ?  ?     Daydream  ?  ?  n/a  n/a  n/a  n/a     Legend:   YES : Confirmed to work  ? : Should work, but not tested  No : Does not work  n/a : Not applicable - browser not available on that system/platform   Please  file an issue  if you find a compatibility problem on one of the supported system/platform/browser combinations.", 
            "title": "Compatibility"
        }, 
        {
            "location": "/compatibility/#notes", 
            "text": "Microsoft has announced that it intends to support WebVR in Edge , but this version has not yet shipped.  Special Chromium builds and/or Firefox Nightlies are currently required to use WebVR with Vive and Rift.  Windows has been tested with 64-bit Windows 8.   See  https://iswebvrready.org/  for the latest in overall WebVR compatibility, and  https://webvr.info/  for links to the latest browser builds, libraries, and other info.", 
            "title": "Notes:"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing to Embedding\n\n\nContributions to the library are welcome! Please check out the \nroadmap\n to get some ideas for future directions.\n\n\nDefinitely come introduce yourself on \ngitter\n!", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing-to-embedding", 
            "text": "Contributions to the library are welcome! Please check out the  roadmap  to get some ideas for future directions.  Definitely come introduce yourself on  gitter !", 
            "title": "Contributing to Embedding"
        }, 
        {
            "location": "/roadmap/", 
            "text": "Roadmap\n\n\nEmbeddings\n\n\n\n\nForce-directed layout, including gravitational attraction, repulsion, springs, viscosity; possible starting points include\n\n\nEmbedding \"chaining\" via events\n\n\nAggregate embedding: display summary functions of data points that update as DPs are added/removed, possibly with filters, possibly grouped or binned\n\n\n\n\nEffects\n\n\n\n\nRigid-body interactions and gravity\n\n\n\"Wind\" and perturbation\n\n\nDirectional lighting and shadows\n\n\nMoving lighting\n\n\n\n\nInteractivity\n\n\n\n\nDefault navigation: teleportation\n\n\nHaptic feedback on supported browsers/controllers\n\n\nSpatialized sound effects on events\n\n\nSelection model and operations\n\n\n\n\nData Sources\n\n\n\n\nSQL query loading into Dataset\n\n\n\n\nIntegrations\n\n\n\n\nAltspaceSDK\n\n\nA-Frame\n\n\n\n\nBuilds / Packaging\n\n\n\n\nAutomated testing and CI\n\n\nBuild status, code coverage, etc. reported in README widgets\n\n\nClean up dependencies to use node_modules where possible (rather than script tags)", 
            "title": "Roadmap"
        }, 
        {
            "location": "/roadmap/#roadmap", 
            "text": "", 
            "title": "Roadmap"
        }, 
        {
            "location": "/roadmap/#embeddings", 
            "text": "Force-directed layout, including gravitational attraction, repulsion, springs, viscosity; possible starting points include  Embedding \"chaining\" via events  Aggregate embedding: display summary functions of data points that update as DPs are added/removed, possibly with filters, possibly grouped or binned", 
            "title": "Embeddings"
        }, 
        {
            "location": "/roadmap/#effects", 
            "text": "Rigid-body interactions and gravity  \"Wind\" and perturbation  Directional lighting and shadows  Moving lighting", 
            "title": "Effects"
        }, 
        {
            "location": "/roadmap/#interactivity", 
            "text": "Default navigation: teleportation  Haptic feedback on supported browsers/controllers  Spatialized sound effects on events  Selection model and operations", 
            "title": "Interactivity"
        }, 
        {
            "location": "/roadmap/#data-sources", 
            "text": "SQL query loading into Dataset", 
            "title": "Data Sources"
        }, 
        {
            "location": "/roadmap/#integrations", 
            "text": "AltspaceSDK  A-Frame", 
            "title": "Integrations"
        }, 
        {
            "location": "/roadmap/#builds-packaging", 
            "text": "Automated testing and CI  Build status, code coverage, etc. reported in README widgets  Clean up dependencies to use node_modules where possible (rather than script tags)", 
            "title": "Builds / Packaging"
        }, 
        {
            "location": "/api/", 
            "text": "Classes\n\n\n\n\nDataset\n\n\nBase Dataset class\n\n\n\n\nDataset\n\n\n\n\nWebSocketDataset\n\n\nA Dataset whose datapoints are received from a websocket.\n\n\n\n\nEmbedding\n\n\nBase class for all embeddings.\n\n\n\n\nEmbedding\n\n\n\n\nMeshEmbedding\n\n\nBase class for embeddings that render Datapoints as individual meshes\n\n\n\n\nPointsEmbedding\n\n\nBase class for embedding backed by a Points object (i.e., particle clouds)\n\n\n\n\nScatterEmbedding\n\n\nAn embedding in which each datapoint is rendered as a vertex in a THREE.Points object.\n\n\n\n\nPathEmbedding\n\n\nA {MeshEmbedding} in which each {Datapoint} is rendered as a Mesh that follows a\npath defined by waypoints.\n\n\n\n\nAggregateEmbedding\n\n\nAn embedding that represents an aggregation of a dataset, including many operations\nfrom traditional data analytics.\n\n\n\n\nAggregateEmbedding\n\n\n\n\n\n\n\nFunctions\n\n\n\n\ninitScene()\n\n\nConvenience function to create a responsive THREE scene and related objects. Returns a number \nof objects that should probably be kept around by the enclosing script.\n\n\n\n\nanimate()\n\n\nThe core animation call that is executed for each frame. Updates all registered\nembeddings, the pointer controls, and the camera position. Renders the scene\nusing the WebVRManager, which applies the VREffect if in VR mode.\n\n\n\n\nregister(embedding)\n\n\nRegister an embedding so that it will be updated on each animation frame.\n\n\n\n\ncategoricalMap()\n\n\nReturn a function that defines a mapping from values for an attribute to target values.\nCan be used, for example, to map from attribute values to colors.\n\n\n\n\n\n\n\nTypedefs\n\n\n\n\nCSVDatasetCallback\n : \nfunction\n\n\nA callback that is triggered after the dataset is loaded; typically used to create\nan embedding based on the dataset.\n\n\n\n\n\n\n\n\n\nDataset\n\n\nBase Dataset class\n\n\nKind\n: global class  \n\n\n\n\nDataset\n\n\ninstance\n\n\n.add(datapoint)\n\n\n.remove(id)\n\n\n.update(id, k)\n\n\n.getDatapoints(filter)\n\n\n\n\n\n\nstatic\n\n\n.createFromCSV(url, callback)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndataset.add(datapoint)\n\n\nAdd a datapoint to the Dataset\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\n\n\n\n\n\n\n\n\ndatapoint\n\n\nDatapoint\n\n\n\n\n\n\n\n\n\n\ndataset.remove(id)\n\n\nRemove a datapoint from the Dataset\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe id of the datapoint to remove\n\n\n\n\n\n\n\n\n\n\ndataset.update(id, k)\n\n\nModify the value of a datapoint attribute\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe id of the datapoint to modify\n\n\n\n\n\n\nk\n\n\nThe key whose value to modify      @ @param v - The new value\n\n\n\n\n\n\n\n\n\n\ndataset.getDatapoints(filter)\n\n\nReturns the datapoints in the dataset, in id order. This is live data, and should not be modified\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilter\n\n\nAn optional filter function\n\n\n\n\n\n\n\n\n\n\nDataset.createFromCSV(url, callback)\n\n\nCreate a {Dataset} from a csv file that can be found at the given url\n\n\nKind\n: static method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nString\n\n\nThe url where the csv file can be found\n\n\n\n\n\n\ncallback\n\n\nCSVDatasetCallback\n\n\n\n\n\n\n\n\n\n\n\n\nDataset\n\n\nKind\n: global class  \n\n\n\n\nDataset\n\n\ninstance\n\n\n.add(datapoint)\n\n\n.remove(id)\n\n\n.update(id, k)\n\n\n.getDatapoints(filter)\n\n\n\n\n\n\nstatic\n\n\n.createFromCSV(url, callback)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndataset.add(datapoint)\n\n\nAdd a datapoint to the Dataset\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\n\n\n\n\n\n\n\n\ndatapoint\n\n\nDatapoint\n\n\n\n\n\n\n\n\n\n\ndataset.remove(id)\n\n\nRemove a datapoint from the Dataset\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe id of the datapoint to remove\n\n\n\n\n\n\n\n\n\n\ndataset.update(id, k)\n\n\nModify the value of a datapoint attribute\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe id of the datapoint to modify\n\n\n\n\n\n\nk\n\n\nThe key whose value to modify      @ @param v - The new value\n\n\n\n\n\n\n\n\n\n\ndataset.getDatapoints(filter)\n\n\nReturns the datapoints in the dataset, in id order. This is live data, and should not be modified\n\n\nKind\n: instance method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilter\n\n\nAn optional filter function\n\n\n\n\n\n\n\n\n\n\nDataset.createFromCSV(url, callback)\n\n\nCreate a {Dataset} from a csv file that can be found at the given url\n\n\nKind\n: static method of \nDataset\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nString\n\n\nThe url where the csv file can be found\n\n\n\n\n\n\ncallback\n\n\nCSVDatasetCallback\n\n\n\n\n\n\n\n\n\n\n\n\nWebSocketDataset\n\n\nA Dataset whose datapoints are received from a websocket.\n\n\nKind\n: global class\n\n\n\n\nEmbedding\n\n\nBase class for all embeddings.\n\n\nKind\n: global class  \n\n\n\n\nEmbedding\n\n\nnew Embedding(scene, dataset, [options])\n\n\n._map()\n\n\n._mapAttr()\n\n\n.embed()\n\n\n\n\n\n\n\n\n\n\nnew Embedding(scene, dataset, [options])\n\n\nEmbedding base constructor.\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscene\n\n\n\n\n\n\nThe scene to which the embedding belongs\n\n\n\n\n\n\ndataset\n\n\nDataset\n\n\n\n\nThe dataset that backs the embedding\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n{}\n\n\nOptions describing the embedding's location and scale\n\n\n\n\n\n\n[options.position.x]\n\n\nNumber\n\n\n0\n\n\nx position of the embedding\n\n\n\n\n\n\n[options.position.y]\n\n\nNumber\n\n\n0\n\n\ny position of the embedding\n\n\n\n\n\n\n[options.position.z]\n\n\nNumber\n\n\n0\n\n\nz position of the embedding\n\n\n\n\n\n\n[options.rotation.x]\n\n\nNumber\n\n\n0\n\n\nx rotation of the embedding\n\n\n\n\n\n\n[options.rotation.y]\n\n\nNumber\n\n\n0\n\n\ny rotation of the embedding\n\n\n\n\n\n\n[options.rotation.z]\n\n\nNumber\n\n\n0\n\n\nz rotation of the embedding\n\n\n\n\n\n\n[options.scale.x]\n\n\nNumber\n\n\n1\n\n\nx scale of the embedding\n\n\n\n\n\n\n[options.scale.y]\n\n\nNumber\n\n\n1\n\n\ny scale of the embedding\n\n\n\n\n\n\n[options.scale.z]\n\n\nNumber\n\n\n1\n\n\nz scale of the embedding\n\n\n\n\n\n\n\n\n\n\nembedding._map()\n\n\nTranslates from a source property of a datapoint to a target property of an embedding\nelement.\n\n\nKind\n: instance method of \nEmbedding\n\n\n\n\nembedding._mapAttr()\n\n\nTranslates from a source property of a datapoint to a target property of an embedding\nelement.\n\n\nKind\n: instance method of \nEmbedding\n\n\n\n\nembedding.embed()\n\n\nRender the embedding - must be implemented by each concrete subclass.\n\n\nKind\n: instance abstract method of \nEmbedding\n\n\n\n\nEmbedding\n\n\nKind\n: global class  \n\n\n\n\nEmbedding\n\n\nnew Embedding(scene, dataset, [options])\n\n\n._map()\n\n\n._mapAttr()\n\n\n.embed()\n\n\n\n\n\n\n\n\n\n\nnew Embedding(scene, dataset, [options])\n\n\nEmbedding base constructor.\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscene\n\n\n\n\n\n\nThe scene to which the embedding belongs\n\n\n\n\n\n\ndataset\n\n\nDataset\n\n\n\n\nThe dataset that backs the embedding\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n{}\n\n\nOptions describing the embedding's location and scale\n\n\n\n\n\n\n[options.position.x]\n\n\nNumber\n\n\n0\n\n\nx position of the embedding\n\n\n\n\n\n\n[options.position.y]\n\n\nNumber\n\n\n0\n\n\ny position of the embedding\n\n\n\n\n\n\n[options.position.z]\n\n\nNumber\n\n\n0\n\n\nz position of the embedding\n\n\n\n\n\n\n[options.rotation.x]\n\n\nNumber\n\n\n0\n\n\nx rotation of the embedding\n\n\n\n\n\n\n[options.rotation.y]\n\n\nNumber\n\n\n0\n\n\ny rotation of the embedding\n\n\n\n\n\n\n[options.rotation.z]\n\n\nNumber\n\n\n0\n\n\nz rotation of the embedding\n\n\n\n\n\n\n[options.scale.x]\n\n\nNumber\n\n\n1\n\n\nx scale of the embedding\n\n\n\n\n\n\n[options.scale.y]\n\n\nNumber\n\n\n1\n\n\ny scale of the embedding\n\n\n\n\n\n\n[options.scale.z]\n\n\nNumber\n\n\n1\n\n\nz scale of the embedding\n\n\n\n\n\n\n\n\n\n\nembedding._map()\n\n\nTranslates from a source property of a datapoint to a target property of an embedding\nelement.\n\n\nKind\n: instance method of \nEmbedding\n\n\n\n\nembedding._mapAttr()\n\n\nTranslates from a source property of a datapoint to a target property of an embedding\nelement.\n\n\nKind\n: instance method of \nEmbedding\n\n\n\n\nembedding.embed()\n\n\nRender the embedding - must be implemented by each concrete subclass.\n\n\nKind\n: instance abstract method of \nEmbedding\n\n\n\n\nMeshEmbedding\n\n\nBase class for embeddings that render Datapoints as individual meshes\n\n\nKind\n: global class\n\n\n\n\nmeshEmbedding.createObjectForDatapoint()\n\n\nA default Object3D creator; this can be overriden by subclasses\n\n\nKind\n: instance method of \nMeshEmbedding\n\n\n\n\nPointsEmbedding\n\n\nBase class for embedding backed by a Points object (i.e., particle clouds)\n\n\nKind\n: global class\n\n\n\n\nScatterEmbedding\n\n\nAn embedding in which each datapoint is rendered as a vertex in a THREE.Points object.\n\n\nKind\n: global class\n\n\n\n\nPathEmbedding\n\n\nA {MeshEmbedding} in which each {Datapoint} is rendered as a Mesh that follows a\npath defined by waypoints.\n\n\nKind\n: global class\n\n\n\n\nAggregateEmbedding\n\n\nAn embedding that represents an aggregation of a dataset, including many operations\nfrom traditional data analytics.\n\n\nKind\n: global class\n\n\n\n\nnew AggregateEmbedding(attr, scene, dataset, [options])\n\n\nCreate a new AggregateEmbedding.\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nattr\n\n\nstring\n\n\n\n\nThe attribute which is being aggregated\n\n\n\n\n\n\nscene\n\n\n\n\n\n\nThe scene to which the embedding belongs\n\n\n\n\n\n\ndataset\n\n\nDataset\n\n\n\n\nThe dataset that backs the embedding\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n{}\n\n\nOptions describing the embedding's location and scale\n\n\n\n\n\n\n[options.filter]\n\n\nfunction\n\n\nidentity\n\n\nA filter to apply to the Dataset before         applying the aggregator. Default is to keep all datapoints in the Dataset\n\n\n\n\n\n\n[options.groupBy]\n\n\nfunction\n\n\nAggregateEmbedding.CollapsedGrouping\n\n\nA function         by whose output the Dataset will be grouped before applyting the aggregator.             Default is to place all datapoints into a single group.\n\n\n\n\n\n\n[options.aggregate]\n\n\nfunction\n\n\nAggregateEmbedding.Aggregates.mean\n\n\nThe function by             which to aggregate the dataset attribute\n\n\n\n\n\n\n\n\n\n\nAggregateEmbedding\n\n\nKind\n: global class\n\n\n\n\nnew AggregateEmbedding(attr, scene, dataset, [options])\n\n\nCreate a new AggregateEmbedding.\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nattr\n\n\nstring\n\n\n\n\nThe attribute which is being aggregated\n\n\n\n\n\n\nscene\n\n\n\n\n\n\nThe scene to which the embedding belongs\n\n\n\n\n\n\ndataset\n\n\nDataset\n\n\n\n\nThe dataset that backs the embedding\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n{}\n\n\nOptions describing the embedding's location and scale\n\n\n\n\n\n\n[options.filter]\n\n\nfunction\n\n\nidentity\n\n\nA filter to apply to the Dataset before         applying the aggregator. Default is to keep all datapoints in the Dataset\n\n\n\n\n\n\n[options.groupBy]\n\n\nfunction\n\n\nAggregateEmbedding.CollapsedGrouping\n\n\nA function         by whose output the Dataset will be grouped before applyting the aggregator.             Default is to place all datapoints into a single group.\n\n\n\n\n\n\n[options.aggregate]\n\n\nfunction\n\n\nAggregateEmbedding.Aggregates.mean\n\n\nThe function by             which to aggregate the dataset attribute\n\n\n\n\n\n\n\n\n\n\ninitScene()\n\n\nConvenience function to create a responsive THREE scene and related objects. Returns a number \nof objects that should probably be kept around by the enclosing script.\n\n\nKind\n: global function\n\n\n\n\nanimate()\n\n\nThe core animation call that is executed for each frame. Updates all registered\nembeddings, the pointer controls, and the camera position. Renders the scene\nusing the WebVRManager, which applies the VREffect if in VR mode.\n\n\nKind\n: global function\n\n\n\n\nregister(embedding)\n\n\nRegister an embedding so that it will be updated on each animation frame.\n\n\nKind\n: global function  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nembedding\n\n\nEmbedding\n\n\nThe embedding\n\n\n\n\n\n\n\n\n\n\ncategoricalMap()\n\n\nReturn a function that defines a mapping from values for an attribute to target values.\nCan be used, for example, to map from attribute values to colors.\n\n\nKind\n: global function\n\n\n\n\nCSVDatasetCallback : \nfunction\n\n\nA callback that is triggered after the dataset is loaded; typically used to create\nan embedding based on the dataset.\n\n\nKind\n: global typedef  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndataset\n\n\nDataset\n\n\nThe Dataset loaded from the csv file", 
            "title": "API"
        }, 
        {
            "location": "/api/#classes", 
            "text": "Dataset  Base Dataset class   Dataset   WebSocketDataset  A Dataset whose datapoints are received from a websocket.   Embedding  Base class for all embeddings.   Embedding   MeshEmbedding  Base class for embeddings that render Datapoints as individual meshes   PointsEmbedding  Base class for embedding backed by a Points object (i.e., particle clouds)   ScatterEmbedding  An embedding in which each datapoint is rendered as a vertex in a THREE.Points object.   PathEmbedding  A {MeshEmbedding} in which each {Datapoint} is rendered as a Mesh that follows a\npath defined by waypoints.   AggregateEmbedding  An embedding that represents an aggregation of a dataset, including many operations\nfrom traditional data analytics.   AggregateEmbedding", 
            "title": "Classes"
        }, 
        {
            "location": "/api/#functions", 
            "text": "initScene()  Convenience function to create a responsive THREE scene and related objects. Returns a number \nof objects that should probably be kept around by the enclosing script.   animate()  The core animation call that is executed for each frame. Updates all registered\nembeddings, the pointer controls, and the camera position. Renders the scene\nusing the WebVRManager, which applies the VREffect if in VR mode.   register(embedding)  Register an embedding so that it will be updated on each animation frame.   categoricalMap()  Return a function that defines a mapping from values for an attribute to target values.\nCan be used, for example, to map from attribute values to colors.", 
            "title": "Functions"
        }, 
        {
            "location": "/api/#typedefs", 
            "text": "CSVDatasetCallback  :  function  A callback that is triggered after the dataset is loaded; typically used to create\nan embedding based on the dataset.", 
            "title": "Typedefs"
        }, 
        {
            "location": "/api/#dataset", 
            "text": "Base Dataset class  Kind : global class     Dataset  instance  .add(datapoint)  .remove(id)  .update(id, k)  .getDatapoints(filter)    static  .createFromCSV(url, callback)", 
            "title": "Dataset"
        }, 
        {
            "location": "/api/#datasetadddatapoint", 
            "text": "Add a datapoint to the Dataset  Kind : instance method of  Dataset        Param  Type      datapoint  Datapoint", 
            "title": "dataset.add(datapoint)"
        }, 
        {
            "location": "/api/#datasetremoveid", 
            "text": "Remove a datapoint from the Dataset  Kind : instance method of  Dataset        Param  Description      id  The id of the datapoint to remove", 
            "title": "dataset.remove(id)"
        }, 
        {
            "location": "/api/#datasetupdateid-k", 
            "text": "Modify the value of a datapoint attribute  Kind : instance method of  Dataset        Param  Description      id  The id of the datapoint to modify    k  The key whose value to modify      @ @param v - The new value", 
            "title": "dataset.update(id, k)"
        }, 
        {
            "location": "/api/#datasetgetdatapointsfilter", 
            "text": "Returns the datapoints in the dataset, in id order. This is live data, and should not be modified  Kind : instance method of  Dataset        Param  Description      filter  An optional filter function", 
            "title": "dataset.getDatapoints(filter)"
        }, 
        {
            "location": "/api/#datasetcreatefromcsvurl-callback", 
            "text": "Create a {Dataset} from a csv file that can be found at the given url  Kind : static method of  Dataset        Param  Type  Description      url  String  The url where the csv file can be found    callback  CSVDatasetCallback", 
            "title": "Dataset.createFromCSV(url, callback)"
        }, 
        {
            "location": "/api/#dataset_1", 
            "text": "Kind : global class     Dataset  instance  .add(datapoint)  .remove(id)  .update(id, k)  .getDatapoints(filter)    static  .createFromCSV(url, callback)", 
            "title": "Dataset"
        }, 
        {
            "location": "/api/#datasetadddatapoint_1", 
            "text": "Add a datapoint to the Dataset  Kind : instance method of  Dataset        Param  Type      datapoint  Datapoint", 
            "title": "dataset.add(datapoint)"
        }, 
        {
            "location": "/api/#datasetremoveid_1", 
            "text": "Remove a datapoint from the Dataset  Kind : instance method of  Dataset        Param  Description      id  The id of the datapoint to remove", 
            "title": "dataset.remove(id)"
        }, 
        {
            "location": "/api/#datasetupdateid-k_1", 
            "text": "Modify the value of a datapoint attribute  Kind : instance method of  Dataset        Param  Description      id  The id of the datapoint to modify    k  The key whose value to modify      @ @param v - The new value", 
            "title": "dataset.update(id, k)"
        }, 
        {
            "location": "/api/#datasetgetdatapointsfilter_1", 
            "text": "Returns the datapoints in the dataset, in id order. This is live data, and should not be modified  Kind : instance method of  Dataset        Param  Description      filter  An optional filter function", 
            "title": "dataset.getDatapoints(filter)"
        }, 
        {
            "location": "/api/#datasetcreatefromcsvurl-callback_1", 
            "text": "Create a {Dataset} from a csv file that can be found at the given url  Kind : static method of  Dataset        Param  Type  Description      url  String  The url where the csv file can be found    callback  CSVDatasetCallback", 
            "title": "Dataset.createFromCSV(url, callback)"
        }, 
        {
            "location": "/api/#websocketdataset", 
            "text": "A Dataset whose datapoints are received from a websocket.  Kind : global class", 
            "title": "WebSocketDataset"
        }, 
        {
            "location": "/api/#embedding", 
            "text": "Base class for all embeddings.  Kind : global class     Embedding  new Embedding(scene, dataset, [options])  ._map()  ._mapAttr()  .embed()", 
            "title": "Embedding"
        }, 
        {
            "location": "/api/#new-embeddingscene-dataset-options", 
            "text": "Embedding base constructor.     Param  Type  Default  Description      scene    The scene to which the embedding belongs    dataset  Dataset   The dataset that backs the embedding    [options]  Object  {}  Options describing the embedding's location and scale    [options.position.x]  Number  0  x position of the embedding    [options.position.y]  Number  0  y position of the embedding    [options.position.z]  Number  0  z position of the embedding    [options.rotation.x]  Number  0  x rotation of the embedding    [options.rotation.y]  Number  0  y rotation of the embedding    [options.rotation.z]  Number  0  z rotation of the embedding    [options.scale.x]  Number  1  x scale of the embedding    [options.scale.y]  Number  1  y scale of the embedding    [options.scale.z]  Number  1  z scale of the embedding", 
            "title": "new Embedding(scene, dataset, [options])"
        }, 
        {
            "location": "/api/#embedding_map", 
            "text": "Translates from a source property of a datapoint to a target property of an embedding\nelement.  Kind : instance method of  Embedding", 
            "title": "embedding._map()"
        }, 
        {
            "location": "/api/#embedding_mapattr", 
            "text": "Translates from a source property of a datapoint to a target property of an embedding\nelement.  Kind : instance method of  Embedding", 
            "title": "embedding._mapAttr()"
        }, 
        {
            "location": "/api/#embeddingembed", 
            "text": "Render the embedding - must be implemented by each concrete subclass.  Kind : instance abstract method of  Embedding", 
            "title": "embedding.embed()"
        }, 
        {
            "location": "/api/#embedding_1", 
            "text": "Kind : global class     Embedding  new Embedding(scene, dataset, [options])  ._map()  ._mapAttr()  .embed()", 
            "title": "Embedding"
        }, 
        {
            "location": "/api/#new-embeddingscene-dataset-options_1", 
            "text": "Embedding base constructor.     Param  Type  Default  Description      scene    The scene to which the embedding belongs    dataset  Dataset   The dataset that backs the embedding    [options]  Object  {}  Options describing the embedding's location and scale    [options.position.x]  Number  0  x position of the embedding    [options.position.y]  Number  0  y position of the embedding    [options.position.z]  Number  0  z position of the embedding    [options.rotation.x]  Number  0  x rotation of the embedding    [options.rotation.y]  Number  0  y rotation of the embedding    [options.rotation.z]  Number  0  z rotation of the embedding    [options.scale.x]  Number  1  x scale of the embedding    [options.scale.y]  Number  1  y scale of the embedding    [options.scale.z]  Number  1  z scale of the embedding", 
            "title": "new Embedding(scene, dataset, [options])"
        }, 
        {
            "location": "/api/#embedding_map_1", 
            "text": "Translates from a source property of a datapoint to a target property of an embedding\nelement.  Kind : instance method of  Embedding", 
            "title": "embedding._map()"
        }, 
        {
            "location": "/api/#embedding_mapattr_1", 
            "text": "Translates from a source property of a datapoint to a target property of an embedding\nelement.  Kind : instance method of  Embedding", 
            "title": "embedding._mapAttr()"
        }, 
        {
            "location": "/api/#embeddingembed_1", 
            "text": "Render the embedding - must be implemented by each concrete subclass.  Kind : instance abstract method of  Embedding", 
            "title": "embedding.embed()"
        }, 
        {
            "location": "/api/#meshembedding", 
            "text": "Base class for embeddings that render Datapoints as individual meshes  Kind : global class", 
            "title": "MeshEmbedding"
        }, 
        {
            "location": "/api/#meshembeddingcreateobjectfordatapoint", 
            "text": "A default Object3D creator; this can be overriden by subclasses  Kind : instance method of  MeshEmbedding", 
            "title": "meshEmbedding.createObjectForDatapoint()"
        }, 
        {
            "location": "/api/#pointsembedding", 
            "text": "Base class for embedding backed by a Points object (i.e., particle clouds)  Kind : global class", 
            "title": "PointsEmbedding"
        }, 
        {
            "location": "/api/#scatterembedding", 
            "text": "An embedding in which each datapoint is rendered as a vertex in a THREE.Points object.  Kind : global class", 
            "title": "ScatterEmbedding"
        }, 
        {
            "location": "/api/#pathembedding", 
            "text": "A {MeshEmbedding} in which each {Datapoint} is rendered as a Mesh that follows a\npath defined by waypoints.  Kind : global class", 
            "title": "PathEmbedding"
        }, 
        {
            "location": "/api/#aggregateembedding", 
            "text": "An embedding that represents an aggregation of a dataset, including many operations\nfrom traditional data analytics.  Kind : global class", 
            "title": "AggregateEmbedding"
        }, 
        {
            "location": "/api/#new-aggregateembeddingattr-scene-dataset-options", 
            "text": "Create a new AggregateEmbedding.     Param  Type  Default  Description      attr  string   The attribute which is being aggregated    scene    The scene to which the embedding belongs    dataset  Dataset   The dataset that backs the embedding    [options]  Object  {}  Options describing the embedding's location and scale    [options.filter]  function  identity  A filter to apply to the Dataset before         applying the aggregator. Default is to keep all datapoints in the Dataset    [options.groupBy]  function  AggregateEmbedding.CollapsedGrouping  A function         by whose output the Dataset will be grouped before applyting the aggregator.             Default is to place all datapoints into a single group.    [options.aggregate]  function  AggregateEmbedding.Aggregates.mean  The function by             which to aggregate the dataset attribute", 
            "title": "new AggregateEmbedding(attr, scene, dataset, [options])"
        }, 
        {
            "location": "/api/#aggregateembedding_1", 
            "text": "Kind : global class", 
            "title": "AggregateEmbedding"
        }, 
        {
            "location": "/api/#new-aggregateembeddingattr-scene-dataset-options_1", 
            "text": "Create a new AggregateEmbedding.     Param  Type  Default  Description      attr  string   The attribute which is being aggregated    scene    The scene to which the embedding belongs    dataset  Dataset   The dataset that backs the embedding    [options]  Object  {}  Options describing the embedding's location and scale    [options.filter]  function  identity  A filter to apply to the Dataset before         applying the aggregator. Default is to keep all datapoints in the Dataset    [options.groupBy]  function  AggregateEmbedding.CollapsedGrouping  A function         by whose output the Dataset will be grouped before applyting the aggregator.             Default is to place all datapoints into a single group.    [options.aggregate]  function  AggregateEmbedding.Aggregates.mean  The function by             which to aggregate the dataset attribute", 
            "title": "new AggregateEmbedding(attr, scene, dataset, [options])"
        }, 
        {
            "location": "/api/#initscene", 
            "text": "Convenience function to create a responsive THREE scene and related objects. Returns a number \nof objects that should probably be kept around by the enclosing script.  Kind : global function", 
            "title": "initScene()"
        }, 
        {
            "location": "/api/#animate", 
            "text": "The core animation call that is executed for each frame. Updates all registered\nembeddings, the pointer controls, and the camera position. Renders the scene\nusing the WebVRManager, which applies the VREffect if in VR mode.  Kind : global function", 
            "title": "animate()"
        }, 
        {
            "location": "/api/#registerembedding", 
            "text": "Register an embedding so that it will be updated on each animation frame.  Kind : global function       Param  Type  Description      embedding  Embedding  The embedding", 
            "title": "register(embedding)"
        }, 
        {
            "location": "/api/#categoricalmap", 
            "text": "Return a function that defines a mapping from values for an attribute to target values.\nCan be used, for example, to map from attribute values to colors.  Kind : global function", 
            "title": "categoricalMap()"
        }, 
        {
            "location": "/api/#csvdatasetcallback-function", 
            "text": "A callback that is triggered after the dataset is loaded; typically used to create\nan embedding based on the dataset.  Kind : global typedef       Param  Type  Description      dataset  Dataset  The Dataset loaded from the csv file", 
            "title": "CSVDatasetCallback : function"
        }
    ]
}